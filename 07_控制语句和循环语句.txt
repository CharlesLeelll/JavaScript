JS中的控制语句:
  if语句  switch语句.
  特点: 选择性执行[多个代码块,最多执行1处]
  
  if语句:
  1.if中文意思: 如果  假如  
  2.格式:
  a. 
  if(条件){
  	当条件为true时,执行此处代码  
  }
  
  b.
  if(条件){
  	当条件为true时,执行此处代码  
  }else{
  	当条件为false时,执行此处代码 
  }
  
  c.
  if(条件){
  	当条件为true时,执行此处代码 .并结束整个if代码块的执行
  }else if(条件){
  	当条件为true时,执行此处代码  .并结束整个if代码块的执行
  }else if(条件){
  	当条件为true时,执行此处代码  . 并结束整个if代码块的执行
  }
  ......
  [
  else{
  	当条件为false时,执行此处代码 
  }
  ]
  
  switch语句:
  1.switch中文意思: 开关 交换 调换 控制
  2.格式:
  
  switch(表达式|值){
  case 值1: 代码1; break;
  case 值2: 代码2; break;
  ......
  [
  default: 默认代码;
  ]
  }
  说明:
  1.在java及其他语言中要求,表达式的值必须与 case值 类型相同. 但是 JS不限制,因此JS是弱类型语言.
  2.在java及其他语言中要求,表达式的值只能为 整数[long除外] 和字符. 但是JS不限制
  3.在java及其他语言中要求,case值必须唯一. 但是JS不限制
  原理:
  JS执行switch代码块时,先执行表达式,然后拿着表达式的值 从上到下 开始 与 case 值匹配.
  若表达式值与case值相同,将指定此处代码.执行结束后,将结束整个switch代码块.
  若表达式值与case值不相同,将继续与下一个case执行进行比较.
  若表达式值与case值都不相同,将执行default代码或结束整个switch代码块.



do while循环:
    1.do表示做 执行  while表示 当..时候
    2.格式:
    do{
    循环体
    }while(条件);
    
原理:
	当执行do while循环时,先执行do后面的循环体,然后再判断条件是否为true.若条件为true,将再次执行循环体.循环体执行结束后,再次判断条件是否为true,若条件为true,将再次执行循环体.依此类推,直到条件为false时结束整个 do while循环.
    
    do while与while区别:
    while循环体可能一次都不执行,do while循环体至少执行1次


while循环:
    1.while中文意思: 当 ..时候 
    2.格式:
    while(条件){
    循环体
    }
原理:
	执行while循环时,先判断条件是否为true. 若条件为true,将执行循环体.当循环体执行结束后,将再次判断条件,若依然为true,将继续执行循环体.依次类推,直到条件为false时,结束整个while循环.
    
    延伸:
    for循环与while循环的区别:
    for循环通常要求知道循环次数
    while循环通常不需要知道循环次数


  for循环:
           格式:
    for( 循环初始值; 循环条件;  循环控制条件 ){
    	循环体: 需要重复执行的代码
    }
    
原理:
	JS执行for循环时,先执行循环初始值,然后判断循环条件是否为true.若循环条件为true,将执行循环体.循环体执行结束后,执行循环控制条件.然后再次判断循环条件是否为true,若为true,将再次执行循环体.依此类推,直到循环条件为false时,结束整个for循环的执行.


    for in循环: [实际就是forEach]
	格式:
    for(var 变量名 in 数组/集合){
    循环体
    }
原理:
	从数组/集合中取出1个元素,将元素的名字/索引赋给该变量.然后执行循环体.当循环体执行结束后,取出下一个元素并将其名字赋给变量,接着执行循环体.依次类推,直到取出最后1个元素为止.

用途:
	专门用于输出集合或数组中的所有数据.